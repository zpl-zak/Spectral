// @todo: inputbox
// @todo: checkbox (underline on when !hover)
// @todo: radio a b (underline on selected)

#if 0 // not used
#define TAPE_LCHR   0x04
#define TAPE_LICON "\x04"
#define TAPE_RCHR   0x05
#define TAPE_RICON "\x05"
#define TV_CHR      0x06
#define TV_ICON    "\x06"
#endif

#define CHIP_CHR          0x17
#define CHIP_STR         "\x17"
#define EJECT_CHR         0x0E
#define EJECT_STR        "\x0E"
#define GUN_CHR           0x0B
#define GUN_STR          "\x0B"
#define JOYSTICK_CHR      0x13
#define JOYSTICK_STR     "\x13"
#define LOVE0_CHR         0x10
#define LOVE0_STR        "\x10"
#define LOVE1_CHR         0x11
#define LOVE1_STR        "\x11"
#define LOVE2_CHR         0x12
#define LOVE2_STR        "\x12"
#define MOUSE_CHR         0x09
#define MOUSE_STR        "\x09"
#define PAUSE_CHR         0x15
#define PAUSE_STR        "\x15"
#define PLAY_CHR          0x14
#define PLAY_STR         "\x14"
#define REVPLAY_CHR       0x0F
#define REVPLAY_STR      "\x0F"
#define SNAP_CHR          0x16
#define SNAP_STR         "\x16"

#define MAKE_ICON(GLYPH,R0,R1,R2,R3,R4,R5,R6,R7) \
{  GLYPH, 0\
   | (uint64_t)B8(R0) << 56ULL \
   | (uint64_t)B8(R1) << 48ULL \
   | (uint64_t)B8(R2) << 40ULL \
   | (uint64_t)B8(R3) << 32ULL \
   | (uint64_t)B8(R4) << 24ULL \
   | (uint64_t)B8(R5) << 16ULL \
   | (uint64_t)B8(R6) <<  8ULL \
   | (uint64_t)B8(R7) <<  0ULL \
}


#if 0
#define TAPE_IGLYPH MAKE_ICON(TAPE_LCHR, \
    01111111, \
    11000000, \
    11001000, \
    11011100, \
    11001000, \
    11000011, \
    11011111, \
    11111111)
#define TAPE_IGLYPH MAKE_ICON(TAPE_RCHR, \
    11111110, \
    00000011, \
    00010011, \
    00111011, \
    00010011, \
    11000011, \
    11111011, \
    11111111)

#define TV_GLYPH MAKE_ICON(TV_CHR, \
    00101000, \
    11111111, \
    10000011, \
    10000011, \
    10000011, \
    10000011, \
    11111111, \
    00000000)
#endif

#define BELL_GLYPH {7,0}

#define BACKSPACE_GLYPH {8,0}

#define MOUSE_GLYPH MAKE_ICON(MOUSE_CHR, \
    01100000, \
    01010000, \
    01001000, \
    01000100, \
    01000010, \
    01000100, \
    01010100, \
    01101000)
/*
    00010000, \
    01111111, \
    01001001, \
    01111111, \
    01000001, \
    01000001, \
    01000001, \
    00111110)
*/

#define GUN_GLYPH MAKE_ICON(GUN_CHR, \
    00000000, \
    00100000, \
    01111111, \
    01110000, \
    01100000, \
    01100000, \
    00000000, \
    00000000)

#define EJECT_GLYPH MAKE_ICON(EJECT_CHR, \
    00000000, \
    00010000, \
    00111000, \
    01101100, \
    11000110, \
    00000000, \
    11111110, \
    00000000)

#define REVPLAY_GLYPH MAKE_ICON(REVPLAY_CHR, \
    00000100, \
    00001100, \
    00011100, \
    00111100, \
    00011100, \
    00001100, \
    00000100, \
    00000000)

#define LOVE0_GLYPH MAKE_ICON(LOVE0_CHR, \
    01101100, \
    10010010, \
    10000010, \
    10000010, \
    01000100, \
    00101000, \
    00010000, \
    00000000)
#define LOVE1_GLYPH MAKE_ICON(LOVE1_CHR, \
    01101100, \
    11110010, \
    11010010, \
    11101010, \
    01010100, \
    00101000, \
    00010000, \
    00000000)
#define LOVE2_GLYPH MAKE_ICON(LOVE2_CHR, \
    01101100, \
    11111110, \
    11111110, \
    11111110, \
    01111100, \
    00111000, \
    00010000, \
    00000000)

#define JOYSTICK_GLYPH MAKE_ICON(JOYSTICK_CHR, \
    00011000, \
    00111100, \
    00110100, \
    00011000, \
    00011000, \
    01111110, \
    11111111, \
    01111110)
/*
    00011100, \
    00011100, \
    00011100, \
    00001000, \
    00001000, \
    01101000, \
    01111110, \
    01111110)
*/

#define PLAY_GLYPH MAKE_ICON(PLAY_CHR, \
    00100000, \
    00110000, \
    00111000, \
    00111100, \
    00111000, \
    00110000, \
    00100000, \
    00000000)

#define PAUSE_GLYPH MAKE_ICON(PAUSE_CHR, \
    01100110, \
    01100110, \
    01100110, \
    01100110, \
    01100110, \
    01100110, \
    01100110, \
    00000000)

#define SNAP_GLYPH MAKE_ICON(SNAP_CHR, \
    11111110, \
    10000010, \
    10000110, \
    10001010, \
    10010110, \
    10101010, \
    11111110, \
    11111110)

#define CHIP_GLYPH MAKE_ICON(CHIP_CHR, \
    01111100, \
    11111110, \
    01101100, \
    11000110, \
    01101100, \
    11111110, \
    01111100, \
    00000000)

#define CHIP_GLYPH2 MAKE_ICON(CHIP_CHR, \
    01111100, \
    11111110, \
    01010100, \
    11010110, \
    01000100, \
    11111110, \
    01111100, \
    00000000)

#define FOLDER_STR   "\x17"
#define FOLDER_CHR    0x17
#define FOLDER_GLYPH MAKE_ICON(FOLDER_CHR, \
    00000000, \
    11110000, \
    11111100, \
    11000000, \
    10111111, \
    01111110, \
    11111100, \
    00000000)

#define SEARCH_STR   "\x18"
#define SEARCH_CHR    0x18
#define SEARCH_GLYPH MAKE_ICON(SEARCH_CHR, \
    00001100, \
    00010010, \
    00100001, \
    00100001, \
    00010010, \
    00111100, \
    01100000, \
    11000000)

#define HOME_STR   "\x19"
#define HOME_CHR    0x19
#define HOME_GLYPH MAKE_ICON(HOME_CHR, \
    00011000, \
    00100100, \
    01011010, \
    10100101, \
    01011010, \
    01000010, \
    00111100, \
    00000000)

#define EYE_STR   "\x19"
#define EYE_CHR    0x19
#define EYE_GLYPH MAKE_ICON(EYE_CHR, \
    00000000, \
    00111100, \
    01000010, \
    10011001, \
    10011001, \
    01000010, \
    00111100, \
    00000000)

#define SPACE_INDEX 16

#define CUSTOM_GLYPHS \
/* TAPE_GLYPHL, TAPE_GLYPHR, TV_GLYPH, */ \
BELL_GLYPH, BACKSPACE_GLYPH, MOUSE_GLYPH, GUN_GLYPH, EJECT_GLYPH, REVPLAY_GLYPH, \
LOVE0_GLYPH,LOVE1_GLYPH,LOVE2_GLYPH, JOYSTICK_GLYPH, PLAY_GLYPH, PAUSE_GLYPH, \
SNAP_GLYPH, FOLDER_GLYPH, SEARCH_GLYPH, EYE_GLYPH

/* generated by ttf2mono.cc v0.2;                         https://github.com/r-lyeh
   bescii.ttf specimen:
 
   !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnop
   qrstuvwxyz{|}~ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàá
   âãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿıŁłŒœŠšŸŽžƒˆˇ˘˙˚˛˜˝ΔΣΩαβγδεθλμπσφχψωẞ–—‘’‚“”„†‡•…‰
   ‹›⁄€™←↑→↓↔↕↖↗↘↙∂∏∑−√∞∫≈≠≤≥⊣⎾⏊⏌─│┌┐└┘├┤┬┴┼╭╮╯╰╱╲╳╴╵╶╷▀▁▂▃▄█▌▍▎▏▐▒▔▕▖▗▘▙▚▛▜▝▞▟■□◊○
   ◌●◢◣◤◥☹☺☼♀♂♠♣♥♦♩♪♫♬♭♮♯✓⭠⭡⭢⭣ぁあぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせぜそぞただちぢっつづてでとどなにぬねのはばぱひびぴふ
   ぶぷへべぺほぼぽまみむめもゃやゅゆょよらりるれろゎわゐゑをんゔ゙゚ゝゞァアィイゥウェエォオカガキギクグケゲコゴサザシジスズセゼソゾタダチヂッツヅテデトドナニヌネ
   ノハバパヒビピフブプヘベペホボポマミムメモャヤュユョヨラリルレロヮワヰヱヲンヴヵヶヷヸヹヺ・ーヽ
   
   
   
   ﬁﬂ𝄞𝄢𝄪𝄫🮌🮍🮎🮏🮐🮕🮖🮜🮝🮞🮟🮠🮡🮢🮣🮤🮥🮦🮧🮨🮩🯅🯆🯇🯈
*/

#define USE_BESCII 0

const uint64_t bescii_bit[][2] = {
CUSTOM_GLYPHS,

// custom font

#if 1 // USE_BESCII // bescii main charset (cpc) - symbols
{0x0020,0x0000000000000000},{0x0021,0x1818181818001800},{0x0022,0x3636240000000000},{0x0023,0x6c6cfe6cfe6c6c00},
{0x0024,0x107cd07c167c1000},{0x0025,0x00666c1830664600},{0x0026,0x386c3876dccc7600},{0x0027,0x1818100000000000},
{0x0028,0x0c18303030180c00},{0x0029,0x30180c0c0c183000},{0x002a,0x00663cff3c660000},{0x002b,0x000018187e181800},
{0x002c,0x0000000000181830},{0x002d,0x000000003c000000},{0x002e,0x0000000000001800},{0x002f,0x02060c1830604000},
#else // master main charset (bbc micro) - symbols
{0x0020,0x0000000000000000},{0x0021,0x1818181818001800},{0x0022,0x6c6c6c0000000000},{0x0023,0x36367f367f363600},
{0x0024,0x0c3f683e0b7e1800},{0x0025,0x60660c1830660600},{0x0026,0x386c6c386d663b00},{0x0027,0x0c18300000000000},
{0x0028,0x0c18303030180c00},{0x0029,0x30180c0c0c183000},{0x002a,0x00187e3c7e180000},{0x002b,0x0018187e18180000},
{0x002c,0x0000000000181830},{0x002d,0x0000007e00000000},{0x002e,0x0000000000181800},{0x002f,0x00060c1830600000},
#endif
#if 0 // USE_BESCII // bescii main charset (cpc) - numbers
{0x0030,0x3c666e7666663c00},{0x0031,0x1838181818181800},{0x0032,0x3c66063c60667e00},{0x0033,0x3c66061c06663c00},
{0x0034,0x1c3c6cccfe0c0c00},{0x0035,0x7e66607c06663c00},{0x0036,0x3c66607c66663c00},{0x0037,0x7e66060c18181800},
{0x0038,0x3c66663c66663c00},{0x0039,0x3c66663e06663c00},
#else // master main charset (bbc micro) - numbers
{0x0030,0x3c666e7e76663c00},{0x0031,0x1838181818187e00},{0x0032,0x3c66060c18307e00},{0x0033,0x3c66061c06663c00},
{0x0034,0x0c1c3c6c7e0c0c00},{0x0035,0x7e607c0606663c00},{0x0036,0x1c30607c66663c00},{0x0037,0x7e060c1830303000},
{0x0038,0x3c66663c66663c00},{0x0039,0x3c66663e060c3800},
#endif
#if 1 // USE_BESCII // bescii main charset (cpc) - symbols
{0x003a,0x0000001800180000},{0x003b,0x0000001800181830},
{0x003c,0x00000c1830180c00},{0x003d,0x0000007c007c0000},{0x003e,0x000030180c183000},{0x003f,0x3c66060c18001800},
#else // master main charset (bbc micro) - symbols
{0x003a,0x0000181800181800},{0x003b,0x0000181800181830},
{0x003c,0x0c18306030180c00},{0x003d,0x00007e007e000000},{0x003e,0x30180c060c183000},{0x003f,0x3c660c1818001800},
#endif
#if USE_BESCII // bescii main charset (cpc) - ABC
{0x0040,0x7cc6ded6dcc07c00},{0x0041,0x183c66667e666600},{0x0042,0x7c66667c66667c00},{0x0043,0x3c66606060663c00},
{0x0044,0x7c66666666667c00},{0x0045,0x7e60607860607e00},{0x0046,0x7e60607860606000},{0x0047,0x3c66606e66663c00},
{0x0048,0x6666667e66666600},{0x0049,0x3c18181818183c00},{0x004a,0x0e06060606663c00},{0x004b,0x66666c786c666600},
{0x004c,0x6060606060607e00},{0x004d,0xc6eefed6c6c6c600},{0x004e,0x66767e6e66666600},{0x004f,0x3c66666666663c00},
{0x0050,0x7c66667c60606000},{0x0051,0x3c666666666e3c06},{0x0052,0x7c66667c66666600},{0x0053,0x3c66603c06663c00},
{0x0054,0x7e18181818181800},{0x0055,0x6666666666663c00},{0x0056,0x66666666663c1800},{0x0057,0xc6c6c6d6d6fe6c00},
{0x0058,0x66663c183c666600},{0x0059,0x6666663c18181800},{0x005a,0x7e060c1830607e00},{0x005b,0x3c30303030303c00},
{0x005c,0x406030180c060200},{0x005d,0x3c0c0c0c0c0c3c00},{0x005e,0x183c660000000000},{0x005f,0x000000000000ff00},
#else // master main charset (bbc micro) - ABC. 'I' is patched to be shorter
{0x0040,0x3c666e6a6e603c00},{0x0041,0x3c66667e66666600},{0x0042,0x7c66667c66667c00},{0x0043,0x3c66606060663c00},
{0x0044,0x786c6666666c7800},{0x0045,0x7e60607c60607e00},{0x0046,0x7e60607c60606000},{0x0047,0x3c66606e66663c00},
{0x0048,0x6666667e66666600},{0x0049,0x3c18181818183c00},{0x004a,0x3e0c0c0c0c6c3800},{0x004b,0x666c7870786c6600},
{0x004c,0x6060606060607e00},{0x004d,0x63777f6b6b636300},{0x004e,0x6666767e6e666600},{0x004f,0x3c66666666663c00},
{0x0050,0x7c66667c60606000},{0x0051,0x3c6666666a6c3600},{0x0052,0x7c66667c6c666600},{0x0053,0x3c66603c06663c00},
{0x0054,0x7e18181818181800},{0x0055,0x6666666666663c00},{0x0056,0x66666666663c1800},{0x0057,0x63636b6b7f776300},
{0x0058,0x66663c183c666600},{0x0059,0x6666663c18181800},{0x005a,0x7e060c1830607e00},{0x005b,0x7c60606060607c00},
{0x005c,0x006030180c060000},{0x005d,0x3e06060606063e00},{0x005e,0x183c664200000000},{0x005f,0x00000000000000ff},
#endif
#if USE_BESCII // bescii main charset (cpc) - abc
{0x0060,0x1008000000000000},{0x0061,0x00003c063e663e00},{0x0062,0x60607c6666667c00},{0x0063,0x00003c6660663c00},
{0x0064,0x06063e6666663e00},{0x0065,0x00003c667e603c00},{0x0066,0x3c6660f860606000},{0x0067,0x00003e66663e063c},
{0x0068,0x60607c6666666600},{0x0069,0x1800181818180c00},{0x006a,0x1800381818181870},{0x006b,0x6060666c786c6600},
{0x006c,0x1818181818180c00},{0x006d,0x0000ecfed6d6d600},{0x006e,0x00007c6666666600},{0x006f,0x00003c6666663c00},
{0x0070,0x00007c66667c6060},{0x0071,0x00003e66663e0606},{0x0072,0x00007c6660606000},{0x0073,0x00003c603c063c00},
{0x0074,0x30307c3030301c00},{0x0075,0x0000666666663e00},{0x0076,0x00006666663c1800},{0x0077,0x0000c6c6d6d66c00},
{0x0078,0x0000663c183c6600},{0x0079,0x00006666663e063c},{0x007a,0x00007e0c18307e00},{0x007b,0x0c18183018180c00},
{0x007c,0x1818181818181818},{0x007d,0x3018180c18183000},{0x007e,0x000000003a6e0000},
#else // master main charset (bbc micro) - abc
{0x0060,0x30180c0000000000},{0x0061,0x00003c063e663e00},{0x0062,0x60607c6666667c00},{0x0063,0x00003c6660663c00},
{0x0064,0x06063e6666663e00},{0x0065,0x00003c667e603c00},{0x0066,0x1c30307c30303000},{0x0067,0x00003e66663e063c},
{0x0068,0x60607c6666666600},{0x0069,0x1800381818183c00},{0x006a,0x1800381818181870},{0x006b,0x6060666c786c6600},
{0x006c,0x3818181818183c00},{0x006d,0x0000367f6b6b6300},{0x006e,0x00007c6666666600},{0x006f,0x00003c6666663c00},
{0x0070,0x00007c66667c6060},{0x0071,0x00003e66663e0607},{0x0072,0x00006c7660606000},{0x0073,0x00003e603c067c00},
{0x0074,0x30307c3030301c00},{0x0075,0x0000666666663e00},{0x0076,0x00006666663c1800},{0x0077,0x0000636b6b7f3600},
{0x0078,0x0000663c183c6600},{0x0079,0x00006666663e063c},{0x007a,0x00007e0c18307e00},{0x007b,0x0c18187018180c00},
{0x007c,0x1818181818181800},{0x007d,0x3018180e18183000},{0x007e,0x316b460000000000},
#endif
{0x00a0,0x0000000000000000},
#if 1 // USE_BESCII. added U+010C Č, U+010D č, U+011A Ě, U+011B ě
{0x00a1,0x0018001818181818},{0x00a2,0x00083e6868683e08},{0x00a3,0x3c6660f86060fe00},{0x00a4,0x0044386c38440000},
{0x00a5,0x66663c183c181800},{0x00a6,0x1818180000181818},{0x00a7,0x3c60786c3c0c7800},{0x00a8,0x2400000000000000},
{0x00a9,0x38449aa29a443800},{0x00aa,0x060a060000000000},{0x00ab,0x0000366cd86c3600},{0x00ac,0x000000007e060600},
{0x00ad,0x0000000000000000},{0x00ae,0x3844bab2aa443800},{0x00af,0x1800000000000000},{0x00b0,0x386c380000000000},
{0x00b1,0x0018187e1818003c},{0x00b2,0x1804081c00000000},{0x00b3,0x18040c1800000000},{0x00b4,0x0810000000000000},
{0x00b5,0x0000363636363c30},{0x00b6,0x7ef4f47434343400},{0x00b7,0x0000000018000000},{0x00b8,0x0000000000000818},
{0x00b9,0x0818080800000000},{0x00ba,0x040a040000000000},{0x00bb,0x0000d86c366cd800},{0x00bc,0x40c44852264e8200},
{0x00bd,0x40c4485c22448e00},{0x00be,0xc02468d2264e8200},{0x00bf,0x001800183060663c},{0x00c0,0x2010183c667e6600},
{0x00c1,0x0408183c667e6600},{0x00c2,0x0814183c667e6600},{0x00c3,0x3c00183c667e6600},{0x00c4,0x2400183c667e6600},
{0x00c5,0x0c0c183c667e6600},{0x00c6,0x7ed8d8fcd8d8de00},{0x00c7,0x3c66606060663c08},{0x00c8,0x10087e6078607e00},
{0x00c9,0x08107e6078607e00},{0x00ca,0x08147e6078607e00},{0x00cb,0x24007e6078607e00},{0x00cc,0x10083c1818183c00},
{0x00cd,0x08103c1818183c00},{0x00ce,0x08143c1818183c00},{0x00cf,0x24003c1818183c00},{0x00d0,0x7c6666f666667c00},
{0x00d1,0x1866767e6e666600},{0x00d2,0x10083e6666663c00},{0x00d3,0x08103e6666663c00},{0x00d4,0x08143e6666663c00},
{0x00d5,0x3c003e6666663c00},{0x00d6,0x24003e6666663c00},{0x00d7,0x0000663c183c6600},{0x00d8,0x3c666e7e76663c00},
{0x00d9,0x1008666666663c00},{0x00da,0x0810666666663c00},{0x00db,0x0814666666663c00},{0x00dc,0x2400666666663c00},
{0x00dd,0x081066663c181800},{0x00de,0x303c3636363c3000},{0x00df,0x00007c666c666c60},{0x00e0,0x10083c063e663e00},
{0x00e1,0x08103c063e663e00},{0x00e2,0x08143c063e663e00},{0x00e3,0x3c003c063e663e00},{0x00e4,0x24003c063e663e00},
{0x00e5,0x18183c063e663e00},{0x00e6,0x00003c1a7e583c00},{0x00e7,0x00003c6660663c08},{0x00e8,0x10083c667e603c00},
{0x00e9,0x08103c667e603c00},{0x00ea,0x08143c667e603c00},{0x00eb,0x24003c667e603c00},{0x00ec,0x1008181818180c00},
{0x00ed,0x0810181818180c00},{0x00ee,0x0814181818180c00},{0x00ef,0x2400181818180c00},{0x00f0,0x0c1f063e66663c00},
{0x00f1,0x3c007c6666666600},{0x00f2,0x10083c6666663c00},{0x00f3,0x08103c6666663c00},{0x00f4,0x08143c6666663c00},
{0x00f5,0x3c003c6666663c00},{0x00f6,0x24003c6666663c00},{0x00f7,0x000018007e001800},{0x00f8,0x00003c6e76663c00},
{0x00f9,0x1008666666663e00},{0x00fa,0x0810666666663e00},{0x00fb,0x0814666666663e00},{0x00fc,0x2400666666663e00},
{0x00fd,0x08106666663e063c},{0x00fe,0x0000303c363c3000},{0x00ff,0x24006666663e063c},

// @fixme: replace this section with official glyphs from the bescii font
// U+010C Č, U+010D č
// U+010E Ď, U+010F ď
// U+011A Ě, U+011B ě
// U+0147 Ň, U+0148 ň
// U+0158 Ř, U+0159 ř
// U+0160 Š, U+0161 š
// U+0164 Ť, U+0165 ť
// U+017D Ž, U+017E ž
{0x010c,0x3c3c666060663c00},{0x010d,0x28103c6660663c00}, // U+010C Č, U+010D č
{0x011a,0x3c7e607c60607e00},{0x011b,0x28103c667e603c00}, // U+011A Ě, U+011B ě

{0x0131,0x0000181818180c00},
{0x0152,0x7ed8d8dcd8d87e00},{0x0153,0x00003c5a5e583c00},{0x0174,0x1028c6c6d67c6c00},{0x0175,0x1028c6c6d6d66c00},
{0x0176,0x081466663c181800},{0x0177,0x08146666663e063c},{0x0178,0x240066663c181800},{0x0192,0x0c183c1818183000},
{0x02c6,0x1028000000000000},{0x02c7,0x2810000000000000},{0x02d8,0x2418000000000000},{0x02d9,0x1000000000000000},
{0x02da,0x1818000000000000},{0x02db,0x00000000000080c0},{0x02dc,0x3458000000000000},{0x02dd,0x2448000000000000},
{0x0300,0x0000000000000000},{0x0301,0x0000000000000000},{0x0302,0x0000000000000000},{0x0303,0x0000000000000000},
{0x0304,0x0000000000000000},{0x0306,0x0000000000000000},{0x0307,0x0000000000000000},{0x0308,0x0000000000000000},
{0x030a,0x0000000000000000},{0x030b,0x0000000000000000},{0x030c,0x0000000000000000},{0x0312,0x0000000000000000},
{0x0326,0x0000000000000000},{0x0327,0x0000000000000000},{0x0328,0x0000000000000000},{0x0335,0x0000000000000000},
{0x0336,0x0000000000000000},{0x0337,0x0000000000000000},{0x0338,0x0000000000000000},{0x0384,0x0810000000000000},
{0x0385,0x2c10000000000000},{0x0386,0x98bc66667e666600},{0x0388,0xbeb0303c30303e00},{0x0389,0xb6b6363e36363600},
{0x038a,0xbc98181818183c00},{0x038c,0xbce6666666663c00},{0x038e,0xb6b6361c0c0c0c00},{0x038f,0x9cb6363636143600},
{0x0390,0x5410181818180c00},{0x0391,0x183c66667e666600},{0x0392,0x7c66667c66667c00},{0x0393,0x3e30303030303000},
{0x0394,0x183c666666667e00},{0x0395,0x7e60607860607e00},{0x0396,0x7e060c1830607e00},{0x0397,0x6666667e66666600},
{0x0398,0x3c66666666663c00},{0x0399,0x3c18181818183c00},{0x039a,0x66666c786c666600},{0x039b,0x183c666666666600},
{0x039c,0xc6eefed6c6c6c600},{0x039d,0x66767e6e66666600},{0x039e,0x7e00003c00007e00},{0x039f,0x3c66666666663c00},
{0x03a0,0x7e66666666666600},{0x03a1,0x7c66667c60606000},{0x03a3,0x7e66301830667e00},{0x03a4,0x7e18181818181800},
{0x03a5,0x6666663c18181800},{0x03a6,0x7cd6d6d6d6d67c00},{0x03a7,0x66663c183c666600},{0x03a8,0xd6d6d6d67c101000},
{0x03a9,0x3c66666666246600},{0x03aa,0x24003c1818183c00},{0x03ab,0x240066663c181800},{0x03ac,0x08103b6e6c6e3b00},
{0x03ad,0x08103c6670663c00},{0x03ae,0x0810dc6666666606},{0x03af,0x0810181818180c00},{0x03b0,0x54106c6666663c00},
{0x03b1,0x00003b6e6c6e3b00},{0x03b2,0x001c363c36363c30},{0x03b3,0x00006666663c1818},{0x03b4,0x003c603c66663c00},
{0x03b5,0x00003c6670663c00},{0x03b6,0x003c0c1830301c06},{0x03b7,0x0000dc6666666606},{0x03b8,0x003c667e66663c00},
{0x03b9,0x0000181818180c00},{0x03ba,0x0000666e786c6600},{0x03bb,0x0030180c1c366600},{0x03bc,0x0000666666667b60},
{0x03bd,0x00006666363c1800},{0x03be,0x007c38603860380c},{0x03bf,0x00003c6666663c00},{0x03c0,0x0000fe6c6c6c6600},
{0x03c1,0x00003c6666667c60},{0x03c2,0x00003c6660603e06},{0x03c3,0x00003f6666663c00},{0x03c4,0x00003c1818180c00},
{0x03c5,0x00006c6666663c00},{0x03c6,0x00007cd6d6d67c00},{0x03c7,0x00006234182c4600},{0x03c8,0x000010d6d6d67c10},
{0x03c9,0x00006cc6d6d66c00},{0x03ca,0x2400181818180c00},{0x03cb,0x24006c6666663c00},{0x03cc,0x08103c6666663c00},
{0x03cd,0x08106c6666663c00},{0x03ce,0x08106cc6d6d66c00},{0x0401,0x247e607860607e00},{0x0410,0x183c66667e666600},
{0x0411,0x7c60607c66667c00},{0x0412,0x7c66667c66667c00},{0x0413,0x3e30303030303000},{0x0414,0x1c36363636367f63},
{0x0415,0x7e60607860607e00},{0x0416,0xd6d6d67cd6d6d600},{0x0417,0x3c66061c06663c00},{0x0418,0x66666e7e76666600},
{0x0419,0x18666e7e76666600},{0x041a,0x66666c786c666600},{0x041b,0x0e1e363636366600},{0x041c,0xc6eefed6c6c6c600},
{0x041d,0x6666667e66666600},{0x041e,0x3c66666666663c00},{0x041f,0x7e66666666666600},{0x0420,0x7c66667c60606000},
{0x0421,0x3c66606060663c00},{0x0422,0x7e18181818181800},{0x0423,0x6666663e060c3800},{0x0424,0x7edbdbdb7e181800},
{0x0425,0x66663c183c666600},{0x0426,0x6666666666667f03},{0x0427,0x6666663e06060600},{0x0428,0xd6d6d6d6d6d6fe00},
{0x0429,0xd6d6d6d6d6d6fe06},{0x042a,0xe060607c66667c00},{0x042b,0xc6c6c6f6dadaf600},{0x042c,0x6060607c66667c00},
{0x042d,0x3c66061e06663c00},{0x042e,0xccd6d6f6d6d6cc00},{0x042f,0x3e66663e1e366600},{0x0430,0x00003c063e663e00},
{0x0431,0x003c603c66663c00},{0x0432,0x00007c667c667c00},{0x0433,0x00003e3030303000},{0x0434,0x00003c6c6c6cfec6},
{0x0435,0x00003c667e603c00},{0x0436,0x0000d6d67cd6d600},{0x0437,0x00003c660c663c00},{0x0438,0x0000666e76666600},
{0x0439,0x3c00666e76666600},{0x043a,0x0000666c786c6600},{0x043b,0x00001e3636366600},{0x043c,0x0000c6eefed6c600},
{0x043d,0x000066667e666600},{0x043e,0x00003c6666663c00},{0x043f,0x00007e6666666600},{0x0440,0x00007c66667c6060},
{0x0441,0x00003c6660663c00},{0x0442,0x00007e1818181800},{0x0443,0x00006666663e063c},{0x0444,0x00007edbdb7e1800},
{0x0445,0x0000663c183c6600},{0x0446,0x0000666666667f03},{0x0447,0x00006666663e0600},{0x0448,0x0000d6d6d6d6fe00},
{0x0449,0x0000d6d6d6d6fe06},{0x044a,0x0000e0607c667c00},{0x044b,0x0000c6c6f6def600},{0x044c,0x000060607c667c00},
{0x044d,0x00003c660e663c00},{0x044e,0x0000ccd6f6d6cc00},{0x044f,0x00003e663e1e3600},{0x0451,0x24003c667e603c00},
{0x05d0,0x000066363c6c6600},{0x05d1,0x0000380c0c0c3e00},{0x05d2,0x00007018386ccc00},{0x05d3,0x00003e0c0c0c0c00},
{0x05d4,0x00007c0666666600},{0x05d5,0x0000181818181800},{0x05d6,0x00003e0c18181800},{0x05d7,0x00007c6666666600},
{0x05d8,0x00006c6666663c00},{0x05d9,0x0018181800000000},{0x05da,0x0000380c0c0c0c0c},{0x05db,0x0000380c0c0c3800},
{0x05dc,0x00607c0c18183000},{0x05dd,0x00007c6666667e00},{0x05de,0x00006c7e36666c00},{0x05df,0x0000181818181818},
{0x05e0,0x0000180c0c0c1c00},{0x05e1,0x00007c6666663c00},{0x05e2,0x00006666361e3c00},{0x05e3,0x00007c6666360606},
{0x05e4,0x00007c6636063c00},{0x05e5,0x000066361c181818},{0x05e6,0x000066361c0c3c00},{0x05e7,0x00003e06666c6c60},
{0x05e8,0x0000380c0c0c0c00},{0x05e9,0x0000d6d6e6c67c00},{0x05ea,0x00007c3636366600},{0x1e80,0x2010c6c6d67c6c00},
{0x1e81,0x1008c6c6d6d66c00},{0x1e82,0x0810c6c6d67c6c00},{0x1e83,0x0810c6c6d6d66c00},{0x1e84,0x2800c6c6d67c6c00},
{0x1e85,0x2800c6c6d6d66c00},{0x1e9e,0x7c66666c66666c60},{0x1ef2,0x100866663c181800},{0x1ef3,0x10086666663e063c},
{0x2013,0x0000007e00000000},{0x2014,0x000000ff00000000},{0x2018,0x3030180000000000},{0x2019,0x0c0c180000000000},
{0x201a,0x0000000000181810},{0x201c,0x6c6c360000000000},{0x201d,0x36366c0000000000},{0x201e,0x0000000000363624},
{0x2020,0x183c181818000000},{0x2021,0x183c183c18000000},{0x2022,0x003c7e7e7e7e3c00},{0x2026,0x000000000000db00},
{0x2030,0x00ccd83060d69a00},{0x2039,0x00000c1830180c00},{0x203a,0x000030180c183000},{0x2044,0x02060c1830604000},
{0x20a7,0x786cfe6c78606000},{0x20ac,0x3c66f060f0663c00},{0x2122,0x007e2e2a00000000},{0x2190,0x102040fe40201000},
{0x2191,0x1038549210101000},{0x2192,0x100804fe04081000},{0x2193,0x1010109254381000},{0x2194,0x002844fe44280000},
{0x2195,0x1038541054381000},{0x2196,0x007c605048440200},{0x2197,0x003e060a12224000},{0x2198,0x004022120a063e00},
{0x2199,0x0002444850607c00},{0x21a1,0x1010543854381000},{0x21b2,0x0606062666fe6020},{0x2202,0x30180c3c6c6c3800},
{0x220f,0x7e34343434343434},{0x2211,0x003c30180c18303c},{0x2212,0x000000003c000000},{0x221a,0x0306060c0cd87830},
{0x221e,0x0000006c926c0000},{0x222b,0x0c18181818181830},{0x2248,0x00003a6e003a6e00},{0x2260,0x0000087c107c2000},
{0x2264,0x000c1830180c003c},{0x2265,0x0030180c1830003c},{0x2296,0x7cc6c6f6c6c67c00},{0x2297,0x7cc6eed6eec67c00},
{0x2299,0x7cc6c6d6c6c67c00},{0x22a3,0x030303ff03030300},{0x237b,0x021f0cd8f0e0c000},{0x237e,0x00386cc6fe28ee00},
{0x238d,0x7e6666666666e700},{0x23be,0x1f18181818181818},{0x23ca,0x18181818181818ff},{0x23cc,0x18181818181818f8},
{0x2426,0x3c66606030180018},{0x2500,0x000000ffff000000},{0x2502,0x1818181818181818},{0x250c,0x0000001f1f181818},
{0x2510,0x000000f8f8181818},{0x2514,0x1818181f1f000000},{0x2518,0x181818f8f8000000},{0x251c,0x1818181f1f181818},
{0x2524,0x181818f8f8181818},{0x252c,0x000000ffff181818},{0x2534,0x181818ffff000000},{0x253c,0x181818ffff181818},
{0x2550,0x0000ff00ff000000},{0x2551,0x1414141414141414},{0x2552,0x00001f101f101010},{0x2553,0x0000001f14141414},
{0x2554,0x00001f1017141414},{0x2555,0x0000f808f8080808},{0x2556,0x000000fc14141414},{0x2557,0x0000fc04f4141414},
{0x2558,0x08080f080f000000},{0x2559,0x1414141f00000000},{0x255a,0x141417101f000000},{0x255b,0x0808f808f8000000},
{0x255c,0x141414fc00000000},{0x255d,0x1414f404fc000000},{0x255e,0x18181f181f181818},{0x255f,0x1414141714141414},
{0x2560,0x1414171017141414},{0x2561,0x1818f818f8181818},{0x2562,0x141414f414141414},{0x2563,0x1414f404f4141414},
{0x2564,0x0000ff00ff080808},{0x2565,0x000000ff14141414},{0x2566,0x0000ff00f7141414},{0x2567,0x0808ff00ff000000},
{0x2568,0x141414ff00000000},{0x2569,0x1414f700ff000000},{0x256a,0x1818ff18ff181818},{0x256b,0x141414ff14141414},
{0x256c,0x1414f700f7141414},{0x256d,0x000000070f1c1818},{0x256e,0x000000e0f0381818},{0x256f,0x181838f0e0000000},
{0x2570,0x18181c0f07000000},{0x2571,0x03070e1c3870e0c0},{0x2572,0xc0e070381c0e0703},{0x2573,0xc3e77e3c3c7ee7c3},
{0x2574,0x000000f8f8000000},{0x2575,0x1818181818000000},{0x2576,0x0000001f1f000000},
#else
{0x00a1,0x1800181818181800},
{0x00a3,0x1c36307c30307e00},{0x00a4,0x00663c66663c6600},{0x00a6,0x1818180018181800},{0x00a7,0x3c603c663c063c00},
{0x00a9,0x7ec39db19dc37e00},{0x00b0,0x3c663c0000000000},{0x00b1,0x18187e1818007e00},{0x00b4,0x0c18300000000000},
{0x00b6,0x3f7b7b3b1b1b1f00},{0x00b7,0x0000001818000000},{0x00bf,0x1800181830663c00},{0x00c4,0x66003c667e666600},
{0x00c5,0x3c663c667e666600},{0x00c6,0x3f66667f66666700},{0x00c7,0x3c66606060663c60},{0x00c9,0x0c187e607c607e00},
{0x00d1,0x366c0066766e6600},{0x00d6,0x663c666666663c00},{0x00d8,0x3e63676b73633e00},{0x00dc,0x6600666666663c00},
{0x00e0,0x30183c063e663e00},{0x00e4,0x66003c063e663e00},{0x00e5,0x3c663c063e663e00},{0x00e6,0x00003f0d3f6c3f00},
{0x00e7,0x00003c6660663c60},{0x00e8,0x30183c667e603c00},{0x00e9,0x0c183c667e603c00},{0x00ea,0x3c663c667e603c00},
{0x00eb,0x66003c667e603c00},{0x00ec,0x3018003818183c00},{0x00ee,0x3c66003818183c00},{0x00f1,0x366c007c66666600},
{0x00f2,0x3018003c66663c00},{0x00f4,0x3c66003c66663c00},{0x00f6,0x66003c6666663c00},{0x00f8,0x00033e676b733e60},
{0x00f9,0x3018006666663e00},{0x00fb,0x3c66006666663e00},{0x00fc,0x6600666666663e00},{0x00ff,0x66006666663e063c},
{0x0391,0x1c3663637f636300},{0x0392,0x7e33333e33337e00},{0x0393,0x7f63606060606000},{0x0394,0x1c1c363663637f00},
{0x0395,0x7f33303e30337f00},{0x0396,0x7e660c1830667e00},{0x0397,0x7733333f33337700},{0x0398,0x3e63637f63633e00},
{0x0399,0x3c18181818183c00},{0x039a,0x63666c786c666300},{0x039b,0x1c1c363663636300},{0x039c,0x63777f6b63636300},
{0x039d,0x63737b6f67636300},{0x039e,0x7e00003c00007e00},{0x039f,0x3e63636363633e00},{0x03a0,0x7f36363636363600},
{0x03a1,0x7e33333e30307800},{0x03a3,0x7f63301830637f00},{0x03a4,0x7e5a181818181800},{0x03a5,0x6666663c18183c00},
{0x03a6,0x3e083e6b3e083e00},{0x03a7,0x6363361c36636300},{0x03a8,0x3e086b6b3e083e00},{0x03a9,0x3e63636336366300},
{0x03aa,0x7f636336361c1c00},{0x03b1,0x00003b6e666e3b00},{0x03b2,0x1e33333e33333e60},{0x03b3,0x000066361c183030},
{0x03b4,0x3c60303c66663c00},{0x03b5,0x00001e301c301e00},{0x03b6,0x3e0c183060603e06},{0x03b7,0x00007c6666660606},
{0x03b8,0x3c66667e66663c00},{0x03b9,0x0000181818180c00},{0x03ba,0x0000666c786c6600},{0x03bb,0x6030181c36636300},
{0x03bc,0x0000333333333e60},{0x03bd,0x000063331b1e1c00},{0x03be,0x3c60603c60603e06},{0x03bf,0x00003e6363633e00},
{0x03c0,0x00007f3636363600},{0x03c1,0x00003c66667c6060},{0x03c3,0x00003f6666663c00},{0x03c4,0x00007e1818180c00},
{0x03c5,0x0000733333331e00},{0x03c6,0x00003e6b6b3e1818},{0x03c7,0x000066361c1c3633},{0x03c8,0x0000636b6b3e1818},
{0x03c9,0x000036636b7f3600},{0x2016,0x3636363636363600},{0x2018,0x30180c0000000000},{0x2019,0x0c18300000000000},
{0x201c,0x6c361b0000000000},{0x201d,0x1b366c0000000000},{0x2020,0x187e181818181800},{0x2021,0x187e1818187e1800},
{0x2032,0x1818180000000000},{0x2190,0x0018387f38180000},{0x2191,0x00183c7e18181818},{0x2192,0x00181cfe1c180000},
{0x2193,0x181818187e3c1800},{0x2202,0x380c063e66663c00},{0x2213,0x007e0018187e1818},{0x221a,0x03030606761c0c00},
{0x2229,0x003c666666666600},{0x222a,0x0066666666663c00},{0x2245,0x00316b46007f0000},{0x2260,0x060c7e187e306000},
{0x2261,0x007e007e007e0000},{0x2264,0x071c701c07007f00},{0x2265,0x701c071c70007f00},{0x2500,0x000000ff00000000},
{0x2502,0x1818181818181818},{0x250c,0x0000001f18181818},{0x2510,0x000000f818181818},{0x2514,0x1818181f00000000},
{0x2518,0x181818f800000000},{0x251c,0x1818181f18181818},{0x2524,0x181818f818181818},{0x252c,0x000000ff18181818},
{0x2534,0x181818ff00000000},{0x253c,0x181818ff18181818},{0x256d,0x000000070c181818},{0x256e,0x000000e030181818},
{0x256f,0x181830e000000000},{0x2570,0x18180c0700000000},{0x2574,0x000000f800000000},{0x2575,0x1818181800000000},
{0x2576,0x0000001f00000000},{0x2577,0x0000001818181818},{0x2588,0xffffffffffffffff},{0x2592,0xaa55aa55aa55aa55},
#endif
{0x2577,0x0000001818181818},
{0x2580,0xffffffff00000000},{0x2581,0x00000000000000ff},{0x2582,0x000000000000ffff},{0x2583,0x0000000000ffffff},
{0x2584,0x00000000ffffffff},{0x2588,0xffffffffffffffff},{0x258c,0xf0f0f0f0f0f0f0f0},{0x258d,0xe0e0e0e0e0e0e0e0},
{0x258e,0xc0c0c0c0c0c0c0c0},{0x258f,0x8080808080808080},{0x2590,0x0f0f0f0f0f0f0f0f},{0x2592,0xcccc3333cccc3333},
{0x2594,0xff00000000000000},{0x2595,0x0101010101010101},{0x2596,0x00000000f0f0f0f0},{0x2597,0x000000000f0f0f0f},
{0x2598,0xf0f0f0f000000000},{0x2599,0xf0f0f0f0ffffffff},{0x259a,0xf0f0f0f00f0f0f0f},{0x259b,0xfffffffff0f0f0f0},
{0x259c,0xffffffff0f0f0f0f},{0x259d,0x0f0f0f0f00000000},{0x259e,0x0f0f0f0ff0f0f0f0},{0x259f,0x0f0f0f0fffffffff},
{0x25a0,0x007e7e7e7e7e7e00},{0x25a1,0x007e424242427e00},{0x25ca,0x10386cc66c381000},{0x25cb,0x3c66c38181c3663c},
{0x25cc,0x1044008200441000},{0x25cf,0x3c7effffffff7e3c},{0x25e2,0x0103070f1f3f7fff},{0x25e3,0x0080c0e0f0f8fcfe},
{0x25e4,0xfefcf8f0e0c08000},{0x25e5,0xff7f3f1f0f070301},{0x25e6,0x003c7e66667e3c00},{0x25f0,0x00007c5474447c00},
{0x25f1,0x00007c4474547c00},{0x25f2,0x00007c445c547c00},{0x25f3,0x00007c545c447c00},{0x25f4,0x385492f282443800},
{0x25f5,0x384482f292543800},{0x25f6,0x3844829e92543800},{0x25f7,0x3854929e82443800},{0x2639,0x7eff99ffc3bdff7e},
{0x263a,0x7eff99ffbdc3ff7e},{0x263c,0x925428c628549200},{0x2640,0x3c6666663c187e18},{0x2642,0x0f070d78cccccc78},
{0x2660,0x10387cfefe103800},{0x2663,0x3838fefefe103800},{0x2665,0x6cfefefe7c381000},{0x2666,0x10387cfe7c381000},
{0x2669,0x040404041c3c1800},{0x266a,0x080c0a0838783000},{0x266b,0x3e22222266ee4400},{0x266c,0x3e223e2266ee4400},
{0x266d,0x0020203828300000},{0x266e,0x0020382838080000},{0x266f,0x00287c287c280000},{0x2713,0x0103066c78706000},
{0x29d6,0xfec66c386cc6fe00},{0x2b60,0x103070ffff703010},{0x2b61,0x183c7eff18181818},{0x2b62,0x080c0effff0e0c08},
{0x2b63,0x18181818ff7e3c18},{0x2b64,0x002466ffff662400},{0x3041,0x00103c10385c3400},{0x3042,0x107e103c565a3400},
{0x3043,0x0000004844442400},{0x3044,0x0044424242522200},{0x3045,0x0000380078041800},{0x3046,0x3c007c0202043800},
{0x3047,0x000038003c083400},{0x3048,0x3c007c0408344600},{0x3049,0x0020742470a86800},{0x304a,0x20fa2278a4a46800},
{0x304b,0x20782a2a4a485000},{0x304c,0x0505107a2a485000},{0x304d,0x107c107c18201c00},{0x304e,0x4aea40f060807000},
{0x304f,0x0408304030080400},{0x3050,0x0a2a408040201000},{0x3051,0x045e444444440800},{0x3052,0x1595b89090902000},
{0x3053,0x7c04082040423c00},{0x3054,0xea2a004080847800},{0x3055,0x107e083c42403c00},{0x3056,0x4afa207884807800},
{0x3057,0x4040404042443800},{0x3058,0x8a8a808084887000},{0x3059,0x087e081828187000},{0x305a,0x25f52060a060c000},
{0x305b,0x00247e242c201c00},{0x305c,0x0555f85050403000},{0x305d,0x3e0c7e0c10100e00},{0x305e,0xf565f06080807000},
{0x305f,0x40f04e4050508e00},{0x3060,0x45e5584050508c00},{0x3061,0x107e203c02021c00},{0x3062,0x25f5407008083000},
{0x3063,0x0000003804041800},{0x3064,0x00007c0202023c00},{0x3065,0x0a0af00808087000},{0x3066,0x007e0c1020201c00},
{0x3067,0x00f8354580807000},{0x3068,0x0020263840403c00},{0x3069,0x0a4a407880807800},{0x306a,0x40ee40444c568a00},
{0x306b,0x005e404050500e00},{0x306c,0x00287caaaa9e6d00},{0x306d,0x20603c22266a2600},{0x306e,0x00003c5252522400},
{0x306f,0x08be88889caa1200},{0x3070,0x15bd9090b8d43400},{0x3071,0x13bb9090b8d43400},{0x3072,0x00e82c4644443800},
{0x3073,0x05d5588c88887000},{0x3074,0x03d3588c88887000},{0x3075,0x380010544a8a3000},{0x3076,0x6a0a20a894146000},
{0x3077,0x660620a894146000},{0x3078,0x000020508c020000},{0x3079,0x0a0a20508c020000},{0x307a,0x060620508c020000},
{0x307b,0xbe88be889caa9200},{0x307c,0xbd95b890b8d42400},{0x307d,0xbb93b890b8d42400},{0x307e,0x087e087e087c7200},
{0x307f,0x0074143e54542400},{0x3080,0x20f42260a0621c00},{0x3081,0x00487ccaaab26400},{0x3082,0x207c207c20221c00},
{0x3083,0x0000287824282000},{0x3084,0x40487cca424c4000},{0x3085,0x0000485c6a5c4800},{0x3086,0x00485c6a4a5c0800},
{0x3087,0x0000101810383400},{0x3088,0x101c101038542200},{0x3089,0x300c405c62420c00},{0x308a,0x0042424262420c00},
{0x308b,0x7c083c62021a3c00},{0x308c,0x20e0382424642600},{0x308d,0x003c081c22020c00},{0x308e,0x0000207834642800},
{0x308f,0x20603c3222622400},{0x3090,0x0078103c52562600},{0x3091,0x7c08304c0e1c344a},{0x3092,0x107c10384e140e00},
{0x3093,0x40405068484a4400},{0x3094,0x6a0ae0101020c000},{0x3099,0x0000000000000000},{0x309a,0x0000000000000000},
{0x309d,0x00202010080c3000},{0x309e,0x0a2a2010080c3000},{0x30a1,0x00007c0418102000},{0x30a2,0x00fe021410102000},
{0x30a3,0x0000000478101000},{0x30a4,0x0002041868080800},{0x30a5,0x0000103c24040800},{0x30a6,0x00107e4202041800},
{0x30a7,0x0000007810107c00},{0x30a8,0x007c101010107e00},{0x30a9,0x0000087c18281000},{0x30aa,0x00047e0c14240800},
{0x30ab,0x00107e1212224400},{0x30ac,0x0a0a20fc24440800},{0x30ad,0x107c10fe10101000},{0x30ae,0x0a4af040f0404000},
{0x30af,0x203e224204083000},{0x30b0,0x0a4a70509020c000},{0x30b1,0x10103e4808081000},{0x30b2,0x0a0a407890102000},
{0x30b3,0x00007e0202027e00},{0x30b4,0x0a0af0101010f000},{0x30b5,0x00247e2404040800},{0x30b6,0x0a0a50f850102000},
{0x30b7,0x3008601204186000},{0x30b8,0x0a4a20844830c000},{0x30b9,0x007e020408146200},{0x30ba,0x0a0af0101020d000},
{0x30bb,0x00203e6428201e00},{0x30bc,0x0a4a78d040403800},{0x30bd,0x0042222204087000},{0x30be,0x0a4a202204087000},
{0x30bf,0x203c24540c083000},{0x30c0,0x0a4a70d030106000},{0x30c1,0x003e087e08081000},{0x30c2,0x0afa20f820204000},
{0x30c3,0x0010082212041800},{0x30c4,0x2012422204087000},{0x30c5,0x0a4a248444087000},{0x30c6,0x003c007e08083000},
{0x30c7,0x0a0a7020f8204000},{0x30c8,0x002020302c202000},{0x30c9,0x0a2a20302c202000},{0x30ca,0x08087e0808083000},
{0x30cb,0x00003e0000007e00},{0x30cc,0x7e02120a040a7000},{0x30cd,0x087e0a1c182c4a00},{0x30ce,0x0004040408106000},
{0x30cf,0x0000242422224200},{0x30d0,0x0a0a505048488800},{0x30d1,0x0606505048488800},{0x30d2,0x00404c7040403c00},
{0x30d3,0x0a8a80f080807800},{0x30d4,0x068680f080807800},{0x30d5,0x007e020204087000},{0x30d6,0x0a0af0101020c000},
{0x30d7,0x0606f0101020c000},{0x30d8,0x0000304884020000},{0x30d9,0x0a0a304884020000},{0x30da,0x0606304884020000},
{0x30db,0x10fe10545492a200},{0x30dc,0x0a2af82070a84000},{0x30dd,0x0626f82070a84000},{0x30de,0x007e022418080400},
{0x30df,0x0078003c003e0000},{0x30e0,0x001010202844fe02},{0x30e1,0x0004241408146200},{0x30e2,0x007c107e10100c00},
{0x30e3,0x0000203c64201000},{0x30e4,0x00207e2224101000},{0x30e5,0x0000003c04043e00},{0x30e6,0x007c040404047e00},
{0x30e7,0x00003c043c043c00},{0x30e8,0x007e027e02027e00},{0x30e9,0x3c007e0202043800},{0x30ea,0x0042424202041800},
{0x30eb,0x004848484a4c8800},{0x30ec,0x00202020222c3000},{0x30ed,0x007e424242427e00},{0x30ee,0x0000003c24041800},
{0x30ef,0x007e424202041800},{0x30f0,0x00047e2424fe0404},{0x30f1,0x007e02141010fe00},{0x30f2,0x007e023e02043800},
{0x30f3,0x0062120204087000},{0x30f4,0x0a4af09010106000},{0x30f5,0x0000103c14240800},{0x30f6,0x0000203c48081000},
{0x30f7,0x0a0af09010106000},{0x30f8,0x0a2af0a0a0f02000},{0x30f9,0x0a0af0106040f000},{0x30fa,0x0a0af01070106000},
{0x30fb,0x0000001818000000},{0x30fc,0x00000000fe000000},{0x30fd,0x0000201008080000},{0xe000,0xc06030183060cf00},
{0xe001,0x6cdadaffe1e37ee7},{0xe002,0x6cdadaffedf37ee7},{0xe003,0x6cdadaffedf3fe6e},{0xe004,0x6cdadaffedf3fe5c},
{0xe005,0x6cdadaffedf37e3b},{0xe006,0x6cdadaffed72ffc3},{0xe007,0x006cdadbfff3ffe7},{0xe008,0x6cdadbfff37e66c3},
{0xe009,0x6cdadbfff37e6642},{0xe00a,0x08106cbefefe6c00},{0xe00b,0x103844a282824438},{0xe00c,0x10386ceeee6c3810},
{0xe00d,0x182c3c3c3c7e423c},{0xe00e,0x2c76e7e7ffff7e3c},{0xe00f,0x10387ceee6ceee7c},{0xe010,0x006cf2f2f2743810},
{0xe064,0x0000ffff00000000},{0xe065,0x00ffff0000000000},{0xe066,0x00000000ffff0000},{0xe067,0x3030303030303030},
{0xe068,0x0c0c0c0c0c0c0c0c},{0xe069,0xffffc0c0c0c0c0c0},{0xe06c,0xc0c0c0c0c0c0ffff},{0xe070,0xffff030303030303},
{0xe072,0x0000000000ffff00},{0xe074,0x6060606060606060},{0xe079,0x0606060606060606},{0xe07c,0xc0c03030c0c03030},
{0xe0a0,0x0303030303030303},{0xe0a8,0x00000000cccc3333},{0xe0b6,0x0707070707070707},{0xe0b7,0xffff000000000000},
{0xe0b8,0xffffff0000000000},{0xe0ba,0x030303030303ffff},{0xe17f,0x3399cc663399cc66},{0xe1a9,0xcc993366cc993366},
{0xefef,0x1038383838387cd6},{0xeffc,0x003c183c3c3c1800},{0xeffd,0x3cffff180c183018},{0xf000,0x384cc6c6c6643800},
{0xf001,0x1838181818187e00},{0xf002,0x7cc60e3c78e0fe00},{0xf003,0x7e0c183c06c67c00},{0xf004,0x0c1c3c6cccfe0c00},
{0xf005,0xfcc0fc0606c67c00},{0xf006,0x3c60c0fcc6c67c00},{0xf007,0xfec60c1830303000},{0xf008,0x78c4e4789e867c00},
{0xf009,0x7cc6c67e060c7800},{0xf00a,0xfe82fafafafafe00},{0xf00b,0x0060f4fefe7c0000},{0xf00c,0x000205f8001028c7},
{0xf00d,0x020d40b0020d40b0},{0xf00e,0x384492ba929282fe},{0xf00f,0x00183c7e3c7eff7e},{0xf010,0x1818183c5e000000},
{0xf011,0x007e85ffb585ff00},{0xf012,0x003c182442423c00},{0xf013,0x003c1824427e3c00},{0xf014,0x003c18247e7e3c00},
{0xf015,0x3c222e7e7e7e4c6e},{0xf016,0x3c343e1c383c3c37},{0xf017,0x00000c1ca8d060b0},{0xf018,0x00c0a090fc90a0c0},
{0xf019,0x0008201a18244080},{0xf01a,0x3c243e3e76764466},{0xf01b,0x3c347e7c787c3c37},{0xf01c,0x00387ce6faffff7e},
{0xf01d,0x00055220000aa440},{0xf01e,0x007d00cf003700de},{0xf01f,0x08041c6c391f3efc},{0xf020,0x3c543c3e361332c4},
{0xf021,0x18141618ff81433d},{0xf022,0x060f0e7efefeaaaa},{0xf023,0x183c745c3c183cfe},{0xf024,0x7c547c7c6c6e22ee},
{0xf025,0xf0f878381c0e0603},{0xf026,0x000000c47ec40000},{0xf027,0x05020508183c3c18},{0xf028,0x386c545454546c38},
{0xf029,0x103038107c383828},{0xf02a,0x0000603038383c7e},{0xf02b,0x0000000000283834},{0xf02c,0x00000000005a3c24},
{0xf02d,0xff8999ffa3a1b1ff},{0xf02e,0x000000aaff9989ff},{0xf02f,0x387c28baff99d1ff},{0xf030,0xbd7edbdbffdbdbff},
{0xf031,0x00071f327fff3900},{0xf032,0x00e0f84cfeff9c00},{0xf033,0x10103838aaeefe92},{0xf034,0x000018bd7edbffa5},
{0xf035,0x000018bd7edbff5a},{0xf036,0x003c7e99ff3c5aa5},{0xf037,0x003c7e99ff3c5a5a},{0xf038,0x3c7eff99db7edba5},
{0xf039,0x3c7eff99db7edb5a},{0xf03a,0x243c3c18183c3c18},{0xf03b,0x00925400c6005492},{0xf03c,0x0000100044001000},
{0xf03d,0x0000000010000000},{0xf03e,0x0000007c82384410},{0xf03f,0x00007c007c823800},{0xf040,0x387cfefefe7c3800},
{0xf041,0x387cfee0fe7c3800},{0xf042,0x387cf0e0f07c3800},{0xf043,0x387c92b6fefeaa00},{0xf044,0x387c92b6fefe5400},
{0xf045,0x384482aa82d6aa00},{0xf046,0x384482aa82aa5400},{0xf047,0x387cfe92fefeaa00},{0xf048,0x387cfe92fefe5400},
{0xf049,0x0042240000244200},{0xf04a,0x0000240000240000},{0xf04b,0x0000001818000000},{0xf04c,0x002838d77e3c0800},
{0xf04d,0x002838547c380800},{0xf04e,0x006c928244281000},{0xf04f,0x006c9e8e4c281000},{0xf050,0x006cfefe7c381000},
{0xf051,0x00387cfeba926c54},{0xf052,0x00185a5a185a5a00},{0xf053,0x00142e5cba742810},{0xf054,0x000020505f562000},
{0xf055,0x0070487448404040},{0xf056,0x0068546850404040},{0xf057,0x007e4e4e4e4e2c18},{0xfb01,0x3c6660fc6c6c6600},
{0xfb02,0x3c6666f666666300},{0x1d11e,0x0c0a1c386c6a3c08},{0x1d122,0x00306a680a081000},{0x1d12a,0x0000002810280000},
{0x1d12b,0x004050705c741800},{0x1f5f2,0x0c18307e0c183000},{0x1fb8c,0xa050a050a050a050},{0x1fb8d,0x0a050a050a050a05},
{0x1fb8e,0xaa55aa5500000000},{0x1fb8f,0x00000000aa55aa55},{0x1fb90,0x55aa55aa55aa55aa},{0x1fb95,0xcccc3333cccc3333},
{0x1fb96,0x3333cccc3333cccc},{0x1fb9c,0xaa54a850a0408000},{0x1fb9d,0xaa552a150a050201},{0x1fb9e,0x0102050a152a55aa},
{0x1fb9f,0x008040a050a854aa},{0x1fba0,0x183060c080000000},{0x1fba1,0x180c060301000000},{0x1fba2,0x00000080c0603018},
{0x1fba3,0x0000000103060c18},{0x1fba4,0x183060c0c0603018},{0x1fba5,0x180c060303060c18},{0x1fba6,0x00000081c3663c18},
{0x1fba7,0x183c66c381000000},{0x1fba8,0x183060c183060c18},{0x1fba9,0x180c0683c1603018},{0x1fbc5,0x383810fe10284482},
{0x1fbc6,0x3838927c10282828},{0x1fbc7,0x3838127c90282422},{0x1fbc8,0x3838907c12284888},
{0,0}

};

#define theFont bescii_bit // CC1.0
enum { theFontW = 8, theFontH = 8, theFontPaddingW = -1, theFontPaddingH = 0, theFontLineSpacing = 4 };

const char* as_utf8(const char *str) {
    // detect utf8
    unsigned cp = 1;
    const char *p = str;
    while(*p && cp) p = extract_utf32(p, &cp);
    if( !*p ) return str; // p at eof, str is utf8

    char *ret = va("%.*s", (int)strlen(str)*2 + 1, ""), *ptr = ret;
    while( *str ) {
        unsigned idx = (unsigned char)*str++;
        if( idx < 0x80 ) *ptr++ = idx;
        else ptr += sprintf(ptr, "%s", codepoint_to_utf8(idx));
    }
    *ptr++ = 0;

    return ret;
}


int ui_outline;

int ui_print_glyph8x8(Tigr *ui, int ui_x, int ui_y, const rgba *colors, uint64_t bits) {
    // early clips
    if(!bits) return 0;
    if((ui_y+theFontH) < 0 || ui_y >= _240) return 0;
    if((ui_x+theFontW) < 0 || ui_x >= _320) return 0;
    // clip vertical
    int y = 0, h = theFontH;
    if( (ui_y+h) >= _240 ) h -= (ui_y+h)-_239;
    else if( ui_y < 0 ) y = -ui_y, ui_y = 0;
    // clip horizontal
    int x = 0, w = theFontW;
    {
        int clipr = 0, clipl = 0;
        if( (ui_x+w) >= _320 ) clipr = (ui_x+w)-_319, clipl = clipr;
        else if( ui_x < 0 ) clipl = -ui_x, ui_x = 0;

        if( clipl || clipr ) { // @fixme: optimize this
            uint8_t b0 = bits >>  0; b0 >>= clipr; b0 <<= clipl;
            uint8_t b1 = bits >>  8; b1 >>= clipr; b1 <<= clipl;
            uint8_t b2 = bits >> 16; b2 >>= clipr; b2 <<= clipl;
            uint8_t b3 = bits >> 24; b3 >>= clipr; b3 <<= clipl;
            uint8_t b4 = bits >> 32; b4 >>= clipr; b4 <<= clipl;
            uint8_t b5 = bits >> 40; b5 >>= clipr; b5 <<= clipl;
            uint8_t b6 = bits >> 48; b6 >>= clipr; b6 <<= clipl;
            uint8_t b7 = bits >> 56; b7 >>= clipr; b7 <<= clipl;
            bits = 0
            | ((uint64_t)b0) <<  0ULL
            | ((uint64_t)b1) <<  8ULL
            | ((uint64_t)b2) << 16ULL
            | ((uint64_t)b3) << 24ULL
            | ((uint64_t)b4) << 32ULL
            | ((uint64_t)b5) << 40ULL
            | ((uint64_t)b6) << 48ULL
            | ((uint64_t)b7) << 56ULL;
        }
    }

    rgba *texture = &((rgba*)ui->pix)[ui_x + ui_y * _320];

    // outline

    if( ui_outline ) {
    int ybak = y;

    for( ; y < h; ++y, texture += _320 ) {
        unsigned y64 = (7 - y) * 8; // will loop 56,48,40,32,24,16,8,0 
        if(bits & (0x80ULL << y64)) texture[_319+0] = texture[1/*_321+0*/] = texture[-_321+0] = texture[-_319+0] = colors[0];
        if(bits & (0x40ULL << y64)) texture[_319+1] = texture[2/*_321+1*/] = texture[-_321+1] = texture[-_319+1] = colors[0];
        if(bits & (0x20ULL << y64)) texture[_319+2] = texture[3/*_321+2*/] = texture[-_321+2] = texture[-_319+2] = colors[0];
        if(bits & (0x10ULL << y64)) texture[_319+3] = texture[4/*_321+3*/] = texture[-_321+3] = texture[-_319+3] = colors[0];
        if(bits & (0x08ULL << y64)) texture[_319+4] = texture[5/*_321+4*/] = texture[-_321+4] = texture[-_319+4] = colors[0];
        if(bits & (0x04ULL << y64)) texture[_319+5] = texture[6/*_321+5*/] = texture[-_321+5] = texture[-_319+5] = colors[0];
        if(bits & (0x02ULL << y64)) texture[_319+6] = texture[7/*_321+6*/] = texture[-_321+6] = texture[-_319+6] = colors[0];
        if(bits & (0x01ULL << y64)) texture[_319+7] = texture[8/*_321+7*/] = texture[-_321+7] = texture[-_319+7] = colors[0];
    }

    texture -= _320 * (h - ybak);
    y = ybak;
    }

    // shadow

    for( ; y < h; ++y, texture += _320 ) {
        unsigned y64 = (7 - y) * 8; // will loop 56,48,40,32,24,16,8,0 
        if(bits & (0x80ULL << y64)) texture[_321+0] = colors[0], texture[0] = colors[1];
        if(bits & (0x40ULL << y64)) texture[_321+1] = colors[0], texture[1] = colors[1];
        if(bits & (0x20ULL << y64)) texture[_321+2] = colors[0], texture[2] = colors[1];
        if(bits & (0x10ULL << y64)) texture[_321+3] = colors[0], texture[3] = colors[1];
        if(bits & (0x08ULL << y64)) texture[_321+4] = colors[0], texture[4] = colors[1];
        if(bits & (0x04ULL << y64)) texture[_321+5] = colors[0], texture[5] = colors[1];
        if(bits & (0x02ULL << y64)) texture[_321+6] = colors[0], texture[6] = colors[1];
        if(bits & (0x01ULL << y64)) texture[_321+7] = colors[0], texture[7] = colors[1];
    }
    return 1;
}

int ui_find_index(unsigned glyph) {
    if( glyph )
    for( int i = 0; glyph >= theFont[i][0]; ++i ) {
        if( glyph == theFont[i][0] ) {
            // if( theFont[i][0] == ' ' ) printf("glyph[' ']==index[%d]\n", i);
            // if( theFont[i][0] == 'i' ) printf("glyph['i']==index[%d]\n", i);
            return i;
        }
    }
    return -1;
}

int ui_monospaced = 0; // can be toggled before any ui_print() call; then will reset automatically

unsigned ui_widths_index(int index) { // returns glyph_width << 24 | left_space << 16 | both_spaces << 8 | right_space
    if( index >= 0 ) {
        if( index == SPACE_INDEX ) return 4<<8; // ' ' width
        uint64_t bits = theFont[index][1];
        unsigned left = 8, right = 8;
        if( bits ) while( bits ) {
            left = min(left, __builtin_safe_clz(bits<<24) );
            right = min(right, __builtin_safe_ctz(bits&255) );
            bits >>= 8;
        }
        right *= left != 8;
        unsigned rc = (theFontW - (left+right)) << 24 | left << 16 | (left+right) << 8 | right;
        return rc;
    }
    return 0;
}

int ui_print_index(Tigr *ui, int ui_x, int ui_y, const rgba *colors, uint64_t ui_invert, int index) {
    if( index >= 0 ) {
        unsigned widths = !ui_monospaced * ui_widths_index(index);
        ui_print_glyph8x8(ui, ui_x - ((widths >> 16) & 255), ui_y, colors, theFont[index][1] ^ ui_invert);
        return widths;
    }
    return 0;
}

int ui_print(Tigr *ui, int ui_x, int ui_y, rgba *colors, const char *utf8) {
    uint64_t ui_invert = 0;
    unsigned copyx = ui_x, copyy = ui_y;
    unsigned yqueue = 0, xmax = 0, ui_cr = ui_x;
    while( *utf8 ) {
        if( *utf8 == '~' ) { ui_invert ^= ~0uLL, ++utf8; continue; } // control code: invert bitmask
        if( (byte)*utf8 <= 0x7 ) { if(colors) colors[1] = ((TPixel){(!!(*utf8 & 2))*255,(!!(*utf8 & 4))*255,(!!(*utf8 & 1))*255,255}).rgba; ++utf8; continue; } // control code: color
        if( *utf8 == '\f') { ++ui_x; ++utf8; continue; }

        int lf = *utf8 == '\n';
        int cr = *utf8 == '\r' || lf;
        int bs = *utf8 == '\b';

        unsigned glyph;
        utf8 = extract_utf32(utf8, &glyph);
        if(!glyph) { utf8++; continue; } // bypass bad encoding

        if( lf ) yqueue += theFontH + theFontPaddingH;
        if( cr ) ui_x = ui_cr;
        if( bs ) ui_x--;
        if( !(lf+cr+bs) ) {
            unsigned widths = 0;
            ui_y += yqueue;
            ui && (widths = ui_print_index(ui, ui_x, ui_y, colors, ui_invert, ui_find_index(glyph)));
            yqueue = 0;
            ui_x += theFontW + ui_monospaced * theFontPaddingW - !ui_monospaced * (((widths >> 8) & 255) + theFontPaddingW);
        }

        xmax = max(xmax, ui_x);
    }
    ui_monospaced = 1;
    return (ui_y - copyy + theFontH + theFontPaddingH) << 16 | (xmax - copyx);
}

// -----------------

const TPixel ui_00 = {0,0,0,255}, ui_ff = { 255,255,224, 255};
rgba ui_colors[] = { 0xff000000, 0xffffffff }; // ui_00 and ui_ff

Tigr *ui_layer;
int ui_x, ui_y, ui_cr; // ui text cursor coords (x,y) and carriage return coord (x)
int ui_mx, ui_my, ui_lmb, ui_rmb, ui_click, ui_press, ui_hover; // ui mouse
int ui_allow_links = 1;

typedef struct ui_stack {
rgba ui_colors[2];
Tigr *ui_layer;
int ui_x, ui_y, ui_cr; // ui text cursor coords (x,y) and carriage return coord (x)
int ui_mx, ui_my, ui_lmb, ui_rmb, ui_click, ui_press, ui_hover; // ui mouse
} ui_stack;
ui_stack ui_push() {
    ui_stack x = {{ui_colors[0],ui_colors[1]},ui_layer,ui_x,ui_y,ui_cr,ui_mx,ui_my,ui_lmb,ui_rmb,ui_click,ui_press,ui_hover};
    return x;
}
void ui_pop(ui_stack x) {
    ui_colors[0] = x.ui_colors[0];
    ui_colors[1] = x.ui_colors[1];
    ui_layer = x.ui_layer;
    ui_x = x.ui_x;
    ui_y = x.ui_y;
    ui_cr = x.ui_cr;
    ui_mx = x.ui_mx;
    ui_my = x.ui_my;
    ui_lmb = x.ui_lmb;
    ui_rmb = x.ui_rmb;
    ui_click = x.ui_click;
    ui_press = x.ui_press;
    ui_hover = x.ui_hover;
}


void ui_frame_begin() {
    struct mouse m = mouse();

    ui_mx = m.x;
    ui_my = m.y;
    ui_lmb = m.lb;
    ui_rmb = m.rb;

    static int mb_prev = 0;
    int mb = ui_rmb << 1 | ui_lmb;
    ui_press = (mb & 3); // L:1, R:2
    ui_click = (mb & 1) > (mb_prev & 1) || (mb & 2) > (mb_prev & 2); // L:1(down), R:2(down) @fixme:R:2(up)
    mb_prev = mb;
}

void ui_at(Tigr *layer, int x, int y) {
    ui_layer = layer;
    ui_cr =
    ui_x = x;
    ui_y = y;
}

void ui_label(const char *text) {
    int dims = ui_print(ui_layer, ui_x, ui_y, ui_colors, text);
    int w = dims & 0xFFFF;
    int h = dims >> 16;
    ui_x += w;
    ui_y += h * (h > theFontH);
}

#if 0 // old method

void ui_notify(const char *utf8) {
    int dims = ui_print(0, 0, 0, NULL, utf8);
    int w = dims & 0xFFFF;
    int h = dims >> 16;
    ui_print(ui_layer, (_320-w)/2, _240-(theFontH+theFontPaddingH)*2, ui_colors, utf8);
    ui_colors[1] = ui_ff.rgba;
}

#else

static char     ui_notify_text[512];
static TPixel   ui_notify_color;
static uint64_t ui_notify_timer;

void ui_notify(const char *utf8) {
    ui_notify_color = ui_ff;
    ui_notify_timer = time_ns();

    snprintf(ui_notify_text, 512, "%s", utf8 ? utf8 : "");
    replace(ui_notify_text, "#", "\n");
}

static
void ui_notify_draw() {
    char *ptr = ui_notify_text;
    while( *ptr == '\n' ) ++ptr;
    if( *ptr == '\0' ) return;

    // text rect
    int dims = ui_print(0, 0, 0, NULL, ptr);
    int w = dims & 0xFFFF;
    int h = dims >> 16;
    int lines = 1 + h / theFontH;

    // anim var
    static float smooth = 0;

    // hash contents
    static uint64_t hash_prev = 0;
    uint64_t hash = fnv1a(ptr, strlen(ptr));
    int changed = hash ^ hash_prev; hash_prev = hash;

    // timing
    uint64_t now = time_ns(); if(changed) /*prev_timer = now,*/ smooth = 0;
    double timer = (now - ui_notify_timer) / 1e9;

    int enabled = timer < 0.200;

    // ui animation
    smooth = smooth * 0.75 + enabled * 0.25;
    int y = _240-lines*(theFontH+theFontPaddingH)*smooth;
    if( smooth > 0.1 ) {
        // draw black panel
        int y2 = y-(theFontH+theFontPaddingH);
        TPixel transp = { 0,0,0, 192 * smooth };
        tigrFillRect(ui_layer, -1,y2, _320+2,_240, transp);
        tigrLine(ui_layer, -1,y2, _320+2,y2, ((TPixel){255,255,255,240*smooth}));
    }

    // text
    rgba ui_colors2[] = { ui_00.rgba, ui_notify_color.rgba };
#if 0
    // left aligned
    ui_print(ui_layer, (_320-w)/2, y/*_240-(theFontH+theFontPaddingH)*2*/, ui_colors2, ptr);
#else
    // centered
    char *bak = strchr(ptr, '\n');
    while( bak && *ptr ) {
        *bak = '\0';

        int dims2 = ui_print(0, 0, 0, NULL, ptr);
        int w2 = dims2 & 0xFFFF;
        int h2 = dims2 >> 16;
        int lines2 = 1 + h2 / theFontH;

        ui_print(ui_layer, (_320-w)/2 + (w-w2)/2, y/*_240-(theFontH+theFontPaddingH)*2*/, ui_colors2, ptr);

        *bak = '\n';
        ptr = bak + 1;
        bak = strchr(ptr, '\n');
        y += 1 + theFontH;
    }
    if( *ptr ) {
        int dims2 = ui_print(0, 0, 0, NULL, ptr);
        int w2 = dims2 & 0xFFFF;
        int h2 = dims2 >> 16;
        int lines2 = 1 + h2 / theFontH;

        ui_print(ui_layer, (_320-w)/2 + (w-w2)/2, y/*_240-(theFontH+theFontPaddingH)*2*/, ui_colors2, ptr);
    }
#endif
}

void ui_frame_end() {
    ui_notify_draw();
}

#endif

int ui_button(const char *hint8, const char *utf8) {
#if 0
    tigrPrint(ui_layer, tfont, ui_x, ui_y, "%s", utf8);
    int w = tigrTextWidth(tfont, utf8);
    int h = tigrTextHeight(tfont, utf8);
#else
    int dims = ui_print(ui_layer, ui_x, ui_y, ui_colors, utf8);
    ui_colors[1] = ui_ff.rgba;

    int w = dims & 0xFFFF;
    int h = dims >> 16;
    // debug:
    // printf("(text `%s`) (%dx%d)\n", utf8, w, h);
    // tigrLine(ui, ui_x,ui_y, ui_x,ui_y+h, ui_ff);
    // tigrLine(ui, ui_x,ui_y+h, ui_x+w,ui_y+h, ui_ff);
#endif

    ui_hover = ui_mx >= ui_x && ui_mx < (ui_x+w) && ui_my >= ui_y && ui_my < (ui_y+h);
    ui_hover *= (ui_mx < _320 && ui_my < _240);

    if( ui_hover && ui_allow_links ) {
        // underline
        int lx = ui_x-1, lw = w+2, ly = ui_y+h + 1, lh = 1;
        tigrLine(ui_layer, lx+1, ly+1, lx+lw+1, ly+1, ui_00);
        tigrLine(ui_layer, lx,   ly,   lx+lw,   ly,   ui_ff);

        // cursor hand
        mouse_cursor(2);

        // display hint
        if(hint8) ui_notify(hint8);
    }
    ui_allow_links = 1;

    int nl = 0;
    while( *utf8 ) {
        if( *utf8 == '~' ) { ++utf8; continue; } // control code: invert
        if( (byte)*utf8 <= 0x7 ) { ++utf8; continue; } // control code: color
        if( *utf8 == '\f' ) { ++ui_x; ++utf8; continue; } // control code: +1px
        int lf = *utf8 == '\n';
        int cr = *utf8 == '\r' || lf;
        int bs = *utf8 == '\b';
        if( lf ) ui_y += theFontH + theFontPaddingH, nl = 1;
        if( cr ) ui_x += -ui_x + ui_cr;
        if( bs ) ui_x--;
        unsigned glyph = 0; utf8 = extract_utf32(utf8, &glyph); utf8 += !glyph;
        if( !(lf+cr+bs) ) ui_x += theFontW + ui_monospaced * theFontPaddingW - !ui_monospaced * (((ui_widths_index(ui_find_index(glyph)) >> 8) & 255) + theFontPaddingW);
    }
    ui_y += nl * theFontLineSpacing;

    return ui_hover;
}

#define ui_click(hint, ...) ui_button(hint, va(__VA_ARGS__)) && ui_click
#define ui_press(hint, ...) ui_button(hint, va(__VA_ARGS__)) && ui_press

int ui_rect(window *ui_layer, int x, int y, int x2, int y2) {
    if( x2 < x ) return ui_rect(ui_layer, x2,y, x,y2);
    if( y2 < y ) return ui_rect(ui_layer, x,y2, x2,y);

    tigrLine(ui_layer,   x,y,  x,y2, ui_ff);
    tigrLine(ui_layer,  x,y2, x2,y2, ui_ff);
    tigrLine(ui_layer, x2,y2,  x2,y, ui_ff);
    tigrLine(ui_layer, x2,y,    x,y, ui_ff);

    return 0;
}

// resizes a rgba image of (IXxIY dimensions), to fit a (WxH target). `recolor` if ZX palette should be used
rgba* ui_resize(rgba *bitmap, int ix, int iy, unsigned W, unsigned H, int recolor, int filtered) {
    if( bitmap ) {
        if( recolor ) {
            rgba *p = (rgba*)bitmap;
            int pixels = ix * iy;
            while(pixels--) {
                TPixel *color = (TPixel*)p;

                int bright = !!((color->r&0x80) | (color->g&0x80) | (color->b&0x80));
                color->r = !!(color->r >> 6);
                color->g = !!(color->g >> 6);
                color->b = !!(color->b >> 6);
                int index = (color->g << 2) | (color->r << 1) | (color->b);

                extern rgba ZXPalettes[][64];
                *p++ = ZXPalettes[0][index + 8 * bright];
            }
        }
        rgba *scaled = (rgba*)
#if 0
        stbir_resize_uint8_linear( bitmap, ix, iy, ix*4, NULL, W, H, W*4, STBIR_RGBA );
#else

        // STBIR_FILTER_DEFAULT      = 0,  // use same filter type that easy-to-use API chooses
        // STBIR_FILTER_BOX          = 1,  // A trapezoid w/1-pixel wide ramps, same result as box for integer scale ratios
        // STBIR_FILTER_TRIANGLE     = 2,  // On upsampling, produces same results as bilinear texture filtering
        // STBIR_FILTER_CUBICBSPLINE = 3,  // The cubic b-spline (aka Mitchell-Netrevalli with B=1,C=0), gaussian-esque
        // STBIR_FILTER_CATMULLROM   = 4,  // An interpolating cubic spline
        // STBIR_FILTER_MITCHELL     = 5,  // Mitchell-Netrevalli filter with B=1/3, C=1/3
        // STBIR_FILTER_POINT_SAMPLE = 6,  // Simple point sampling
        // STBIR_FILTER_OTHER        = 7,  // User callback specified
        // STBIR_DEFAULT_FILTER_UPSAMPLE = STBIR_FILTER_CATMULLROM
        // STBIR_DEFAULT_FILTER_DOWNSAMPLE = STBIR_FILTER_MITCHELL

        stbir_resize( bitmap, ix, iy, ix*4, NULL, W, H, W*4,
                               STBIR_RGBA, STBIR_TYPE_UINT8,
                               STBIR_EDGE_CLAMP, filtered ? STBIR_FILTER_MITCHELL : STBIR_FILTER_POINT_SAMPLE );
#endif

        return scaled;
    }
    return NULL;
}

rgba* ui_image(const void *data, unsigned len, unsigned W, unsigned H, int recolor) { // ptr/len or filename/0
    int ix,iy,in;
    unsigned char *bitmap;
    bitmap = !len ? stbi_load((const char *)data, &ix, &iy, &in, 4)
        : stbi_load_from_memory(data, len, &ix, &iy, &in, 4);

    if( bitmap ) {
        rgba *scaled = ui_resize((rgba*)bitmap, ix, iy, W, H, recolor, recolor ? 0 : 1);
        stbi_image_free(bitmap);
        return scaled;
    }

    return NULL;
}

#if 0
    extern int ix, iy;
    int w = min(ix, _320);
    int h = min(iy, _240);
    int x = (_320 - w) / 2;
    int y = (_240 - h) / 2;
    for( int end = y + h; y < end; ++y, ptr += ix ) {
        memcpy( &((rgba*)overlay->pix)[x + y * w] , ptr, w * 4);
    }
#endif

// ----------------------------------------------------------------------------
// ui dialog

static float smooth = 1;

struct dialog_option {
    const char *text, *help; unsigned flags;

    void (*on_click)(const char*); const char *args; unsigned cmd;

    int w, h, lf, center; // @todo align (<)left,(=)center,(>)right

} options[256] = {0}; int num_options = 0;

int ui_dialog_option_ex(unsigned flags, const char *text, const char *help, void (*on_click)(const char*), const char *args) {
    int align = text && *text == '<';
    if( align ) text += align;

    text = text ? STRDUP(text) : STRDUP(" ");
    help = help ? STRDUP(help) : NULL;
    args = args ? STRDUP(args) : NULL;

    int lfs = strcnt(text, '\n');
    enum { LINE_SPACING = 3 };
    int dims2 = ui_print(0, 0, 0, NULL, text);
    int w2 = dims2 & 0xFFFF;
    int h2 =(dims2 >> 16) + (lfs ? (lfs-1) * theFontH : 0);
    int lines2 = 1 + h2 / theFontH;
    int lf = !!lfs;

    options[num_options++] = ((struct dialog_option){text,help,flags,on_click,args,0,w2,h2 + LINE_SPACING,lf,!align});
    return 0;
}

int ui_dialog_option(unsigned flags, const char *text, const char *help, unsigned cmd, const char *args) {
    ui_dialog_option_ex(flags,text,help,NULL,args);
    options[num_options-1].cmd = cmd;
    return 0;
}

int ui_dialog_separator() {
    return ui_dialog_option(0, "\n", NULL, 0, NULL);
}
int ui_dialog_cancel() {
    return ui_dialog_option(1, "Cancel\n", NULL, 0, NULL);
}

int ui_dialog_new(const char *title) {
    for( int i = 0; i < num_options; ++i) {
        if(options[i].text) (void)REALLOC((void*)options[i].text, 0);
        if(options[i].help) (void)REALLOC((void*)options[i].help, 0);
        if(options[i].args) (void)REALLOC((void*)options[i].args, 0);
    }
    num_options = 0;

    smooth = 0;

    if(title) {
        ui_dialog_option(0, va("%s\n",title),NULL, 0,NULL);
        ui_dialog_separator();
    }

    return 0;
}

int ui_dialog_render(Tigr *dialog) {
    smooth = smooth * 0.85 + 1.0 * 0.15;

    if( num_options ) {
        // animate special chars if requested
        static int frame = 0; frame = (frame + 1) % 50;
        for( int i = 0; i < num_options; ++i) {
            if( options[i].flags & 2 ) {
                if( frame < 25 ) {
                    replace((char*)options[i].text, "▁", "▂");
                } else {
                    replace((char*)options[i].text, "▂", "▁");
                }
            }
        }

        // dims
        int LINE_SPACING = 3;
        int EXTRA_PIXELS = theFontH + LINE_SPACING + theFontH; // 2 blank LINES + 1 SPACING

        int center = _240/2;
        int height = EXTRA_PIXELS; for(int i = 0; i < num_options; ++i) height += options[i].h * options[i].lf;
        int dynheight = _240 * (1-smooth) + height * smooth;
        int y1 = center - dynheight/2, y2 = center + dynheight/2;
        // int x0 = 0, y0 = y1 + EXTRA_PIXELS/2 + LINE_SPACING; // animated text
        int x0 = 0, y0 = (center - height/2) + EXTRA_PIXELS/2 + LINE_SPACING;

        // animate black panel
        TPixel transp = { 0,0,0, 224 * smooth };
        tigrClear(dialog,tigrRGBA(0,0,0,0));
        tigrFillRect(dialog, -1, y1, _321, y2-y1+1, transp);
        tigrLine(dialog, -1,y1, _321,y1, ((TPixel){255,255,255,255}));
        tigrLine(dialog, -1,y2, _321,y2, ((TPixel){255,255,255,255}));
        
        // calc longest line
        int maxw = 0;
        for( int i = 0; i < num_options; ++i ) {
            int _0 = 0;

            for( int j = i ; !options[j].lf ; ) {
                do _0 += options[j++].w; while( !options[j-1].lf && (j-1) < num_options );
                _0 += (j-i-1) * theFontW; // word spaces
            }

            if( !_0 ) _0 += options[i].w + theFontW;

            maxw = max(maxw, _0);
        }

        // draw dialog entries at center of screen

        ui_stack bak = ui_push();

        unsigned alpha = ((unsigned)(255*smooth)) << 24;
        ui_colors[0] &= RGB(255,255,255); ui_colors[0] |= alpha;

        int chosen = -1;
        int _0 = 0;

        for( int i = 0; i < num_options; ++i ) {

            _0 = options[i].center ?  0 : (_320-maxw)/2;
            x0 = options[i].center ? x0 : _0;

            // center group horizontally
            if( options[i].center ) {
            for( int j = i ; x0 == _0 ; x0 = (_320-x0) / 2 ) {
                do x0 += options[j++].w; while( !options[j-1].lf && (j-1) < num_options );
                x0 += (j-i-1) * theFontW; // word spaces
            }
            }

            ui_at(dialog, x0, y0);
            if( options[i].lf ) x0 = _0, y0 += options[i].h; else x0 += options[i].w + theFontW;

            ui_colors[1] = RGB(255,255,255) | alpha;
            ui_allow_links = options[i].flags & 1;

            if( ui_click( options[i].help, options[i].text) ) {
                if( options[i].flags & 1 )
                    chosen = i;
            }
        }

        ui_pop(bak);

        if( chosen >= 0 ) {
            struct dialog_option bak = options[chosen];
            if(bak.args) bak.args = va("%s", bak.args);

            int ui_dialog_new(const char *);
            ui_dialog_new(NULL);

            if( bak.on_click ) {
                bak.on_click(bak.args);
            }

            if( bak.cmd ) {
                void on_cmd(unsigned, const char *);
                on_cmd(bak.cmd, bak.args);
            }
        }
    }

    return num_options;
}
